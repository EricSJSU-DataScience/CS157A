{"ast":null,"code":"var _jsxFileName = \"D:\\\\environment\\\\project157_marketplace\\\\src\\\\components\\\\Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Notifications({\n  loggedInUserId\n}) {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (loggedInUserId) {\n      // console.log('Logged in User ID:', loggedInUserId); // Verify that user ID is available\n      fetch(`http://localhost:5000/notifications/${loggedInUserId}`).then(res => res.json()).then(data => {\n        console.log('Notifications fetched:', data);\n        setNotifications(data);\n      }).catch(err => {\n        console.error('Error fetching notifications:', err);\n      });\n    } else {\n      console.log('No loggedInUserId found');\n    }\n  }, [loggedInUserId]);\n  const handleMarkAsRead = notificationId => {\n    console.log(`Marking notification ${notificationId} as read`);\n    fetch(`http://localhost:5000/notifications/${notificationId}/mark-read`, {\n      method: 'PUT'\n    }).then(res => res.json()).then(data => {\n      console.log(data.message);\n      // Update the state to reflect the read status\n      setNotifications(prevNotifications => prevNotifications.map(notification => notification.notification_id === notificationId ? {\n        ...notification,\n        status: 'Read'\n      } : notification));\n    }).catch(err => {\n      console.error('Error updating notification status:', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.notificationsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.notificationsTitle,\n      children: \"Your Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), notifications.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.notificationsList,\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: styles.notificationItem,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: styles.notificationMessage,\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            marginTop: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.notificationDate,\n            children: new Date(notification.notification_Date).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 33\n          }, this), notification.status !== 'Read' && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: styles.readButton,\n            onClick: () => handleMarkAsRead(notification.notification_id),\n            children: \"Mark as Read\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this)]\n      }, notification.notification_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No notifications at this time.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(Notifications, \"6gMUc0OfbF4zJu51/S5RmKCczuA=\");\n_c = Notifications;\nconst styles = {\n  notificationsContainer: {\n    padding: '20px',\n    fontFamily: 'Arial, sans-serif'\n  },\n  notificationsTitle: {\n    textAlign: 'left',\n    marginBottom: '20px',\n    fontSize: '24px',\n    fontWeight: 'bold'\n  },\n  notificationsList: {\n    listStyle: 'none',\n    padding: '0'\n  },\n  notificationItem: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '15px',\n    marginBottom: '15px',\n    boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.1)'\n  },\n  notificationMessage: {\n    fontSize: '16px',\n    margin: '0'\n  },\n  notificationDate: {\n    fontSize: '14px',\n    color: '#666',\n    marginTop: '10px'\n  },\n  readButton: {\n    padding: '5px 10px',\n    backgroundColor: '#28a745',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '14px'\n  }\n};\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Notifications","loggedInUserId","_s","notifications","setNotifications","fetch","then","res","json","data","console","log","catch","err","error","handleMarkAsRead","notificationId","method","message","prevNotifications","map","notification","notification_id","status","style","styles","notificationsContainer","children","notificationsTitle","fileName","_jsxFileName","lineNumber","columnNumber","length","notificationsList","notificationItem","notificationMessage","display","alignItems","justifyContent","marginTop","notificationDate","Date","notification_Date","toLocaleString","readButton","onClick","_c","padding","fontFamily","textAlign","marginBottom","fontSize","fontWeight","listStyle","border","borderRadius","boxShadow","margin","color","backgroundColor","cursor","$RefreshReg$"],"sources":["D:/environment/project157_marketplace/src/components/Notifications.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Notifications({ loggedInUserId }) {\r\n    const [notifications, setNotifications] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (loggedInUserId) {\r\n            // console.log('Logged in User ID:', loggedInUserId); // Verify that user ID is available\r\n            fetch(`http://localhost:5000/notifications/${loggedInUserId}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    console.log('Notifications fetched:', data);\r\n                    setNotifications(data);\r\n                })\r\n                .catch(err => {\r\n                    console.error('Error fetching notifications:', err);\r\n                });\r\n        } else {\r\n            console.log('No loggedInUserId found');\r\n        }\r\n    }, [loggedInUserId]);\r\n\t\r\n\tconst handleMarkAsRead = (notificationId) => {\r\n        console.log(`Marking notification ${notificationId} as read`);\r\n        fetch(`http://localhost:5000/notifications/${notificationId}/mark-read`, {\r\n            method: 'PUT',\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data.message);\r\n                // Update the state to reflect the read status\r\n                setNotifications(prevNotifications =>\r\n                    prevNotifications.map(notification =>\r\n                        notification.notification_id === notificationId\r\n                            ? { ...notification, status: 'Read' }\r\n                            : notification\r\n                    )\r\n                );\r\n            })\r\n            .catch(err => {\r\n                console.error('Error updating notification status:', err);\r\n            });\r\n\t};\r\n\r\n    return (\r\n        <div style={styles.notificationsContainer}>\r\n            <h2 style={styles.notificationsTitle}>Your Notifications</h2>\r\n            {notifications.length > 0 ? (\r\n                <ul style={styles.notificationsList}>\r\n                    {notifications.map(notification => (\r\n                        <li key={notification.notification_id} style={styles.notificationItem}>\r\n                            <p style={styles.notificationMessage}>{notification.message}</p>\r\n                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: '10px' }}>\r\n                                <p style={styles.notificationDate}>{new Date(notification.notification_Date).toLocaleString()}</p>\r\n                                {notification.status !== 'Read' && (\r\n                                    <button \r\n                                        style={styles.readButton} \r\n                                        onClick={() => handleMarkAsRead(notification.notification_id)}\r\n                                    >\r\n                                        Mark as Read\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>No notifications at this time.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    notificationsContainer: {\r\n        padding: '20px',\r\n        fontFamily: 'Arial, sans-serif',\r\n    },\r\n    notificationsTitle: {\r\n        textAlign: 'left',\r\n        marginBottom: '20px',\r\n        fontSize: '24px',\r\n        fontWeight: 'bold',\r\n    },\r\n    notificationsList: {\r\n        listStyle: 'none',\r\n        padding: '0',\r\n    },\r\n    notificationItem: {\r\n        border: '1px solid #ccc',\r\n        borderRadius: '5px',\r\n        padding: '15px',\r\n        marginBottom: '15px',\r\n        boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.1)',\r\n    },\r\n    notificationMessage: {\r\n        fontSize: '16px',\r\n        margin: '0',\r\n    },\r\n    notificationDate: {\r\n        fontSize: '14px',\r\n        color: '#666',\r\n        marginTop: '10px',\r\n    },\r\n\treadButton: {\r\n        padding: '5px 10px',\r\n        backgroundColor: '#28a745',\r\n        color: 'white',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        cursor: 'pointer',\r\n        fontSize: '14px',\r\n    },\r\n};\r\n\r\nexport default Notifications;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}